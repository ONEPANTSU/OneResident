// Generated by view binder compiler. Do not edit!
package space.onepantsu.oneresident.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import space.onepantsu.oneresident.R;

public final class CustomResidentLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button button3;

  @NonNull
  public final RelativeLayout relativeLayout;

  @NonNull
  public final Button residentDeleteButton;

  @NonNull
  public final Button residentInfo;

  private CustomResidentLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull Button button3,
      @NonNull RelativeLayout relativeLayout, @NonNull Button residentDeleteButton,
      @NonNull Button residentInfo) {
    this.rootView = rootView;
    this.button3 = button3;
    this.relativeLayout = relativeLayout;
    this.residentDeleteButton = residentDeleteButton;
    this.residentInfo = residentInfo;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomResidentLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomResidentLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_resident_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomResidentLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button3;
      Button button3 = ViewBindings.findChildViewById(rootView, id);
      if (button3 == null) {
        break missingId;
      }

      id = R.id.relativeLayout;
      RelativeLayout relativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout == null) {
        break missingId;
      }

      id = R.id.residentDeleteButton;
      Button residentDeleteButton = ViewBindings.findChildViewById(rootView, id);
      if (residentDeleteButton == null) {
        break missingId;
      }

      id = R.id.residentInfo;
      Button residentInfo = ViewBindings.findChildViewById(rootView, id);
      if (residentInfo == null) {
        break missingId;
      }

      return new CustomResidentLayoutBinding((ConstraintLayout) rootView, button3, relativeLayout,
          residentDeleteButton, residentInfo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
